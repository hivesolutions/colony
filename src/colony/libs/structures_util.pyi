from typing import Any

FLOAT_PRECISION: int

class Decimal(float):
    places: int

    def __new__(cls, value: float = 0.0): ...
    def __hash__(self): ...
    def __cmp__(self, other: Any): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __floordiv__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __div__(self, other): ...
    def __rdiv__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def __mod__(self, other): ...
    def __rmod__(self, other): ...
    def __and__(self, other): ...
    def __rand__(self, other): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __xor__(self, other): ...
    def __rxor__(self, other): ...
    def __pos__(self): ...
    def __neg__(self): ...
    def __abs__(self): ...
    def __invert__(self): ...
    def __round__(self, n: int = 0): ...
    def __floor__(self) -> int: ...
    def __ceil__(self) -> int: ...
    def __trunc__(self) -> int: ...

class JournaledList(list):
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, object) -> None: ...
    def remove(self, object) -> None: ...
    def clear_journal(self) -> None: ...
    def get_appends(self): ...
    def get_removes(self): ...

class OrderedMap:
    tuples_list: Incomplete

    def __init__(
        self, ordered_keys: bool = False, map: Incomplete | None = None
    ) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __contains__(self, item) -> bool: ...
    def get(self, key, default_value): ...
    def values(self): ...
    def items(self): ...
    def extend(self, map) -> None: ...
    def keys(self): ...
    def itervalues(self): ...
    def iteritems(self): ...
    def iterkeys(self): ...

class OrderedMapIterator:
    ordered_map: Incomplete
    current_index: Incomplete
    def __init__(self, ordered_map) -> None: ...
    def __next__(self): ...
    def next(self): ...

class MultipleValueMap:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __contains__(self, item) -> bool: ...
    def get(self, key, default_value): ...
    def values(self): ...
    def items(self): ...
    def keys(self): ...
    def itervalues(self): ...
    def iteritems(self): ...
    def iterkeys(self): ...
    def unset(self, key, value) -> None: ...

class FormatTuple:
    format_string: Incomplete
    arguments: Incomplete

    def __init__(self, format_string, *args) -> None: ...
    @staticmethod
    def build(format_string, *args): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, value): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __replace__(self, value) -> None: ...
    def json_v(self, format: bool = False): ...
    def format(self, format_string: Incomplete | None = None): ...
    def get_format_string(self): ...
    def set_format_string(self, format_string) -> None: ...

class FileReference:
    path: Incomplete
    encoding: Incomplete

    def __init__(self, path, encoding: Incomplete | None = None) -> None: ...
    def read_all(self, mode: str = "rb"): ...

def is_dictionary(object): ...
